/**
 * Cesium - https://github.com/CesiumGS/cesium
 *
 * Copyright 2011-2020 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./when-a55a8a4c","./Check-bc1d37d9","./Math-d7cbfcf6","./Cartesian2-6ec3db89","./Transforms-a4d7073e","./IntersectionTests-3d9e1b94","./Plane-37b84dad","./EllipsoidRhumbLine-4d1a57d2","./EllipsoidGeodesic-365e69f7"],function(a,w,T,P,y,v,m,A,E,e){"use strict";var b={numberOfPoints:function(a,e,r){var i=y.Cartesian3.distance(a,e);return Math.ceil(i/r)},numberOfPointsRhumbLine:function(a,e,r){var i=Math.pow(a.longitude-e.longitude,2)+Math.pow(a.latitude-e.latitude,2);return Math.ceil(Math.sqrt(i/(r*r)))}},o=new y.Cartographic;b.extractHeights=function(a,e){for(var r=a.length,i=new Array(r),t=0;t<r;t++){var n=a[t];i[t]=e.cartesianToCartographic(n,o).height}return i};var S=new v.Matrix4,R=new y.Cartesian3,D=new y.Cartesian3,M=new A.Plane(y.Cartesian3.UNIT_X,0),G=new y.Cartesian3,x=new A.Plane(y.Cartesian3.UNIT_X,0),N=new y.Cartesian3,I=new y.Cartesian3,k=[];function V(a,e,r){var i,t=k;if(t.length=a,e===r){for(i=0;i<a;i++)t[i]=e;return t}var n=(r-e)/a;for(i=0;i<a;i++){var o=e+i*n;t[i]=o}return t}var L=new y.Cartographic,_=new y.Cartographic,O=new y.Cartesian3,B=new y.Cartesian3,U=new y.Cartesian3,q=new e.EllipsoidGeodesic,z=new E.EllipsoidRhumbLine;function X(a,e,r,i,t,n,o,s){var c=i.scaleToGeodeticSurface(a,B),l=i.scaleToGeodeticSurface(e,U),u=b.numberOfPoints(a,e,r),h=i.cartesianToCartographic(c,L),f=i.cartesianToCartographic(l,_),d=V(u,t,n);q.setEndPoints(h,f);var p=q.surfaceDistance/u,C=s;h.height=t;var g=i.cartographicToCartesian(h,O);y.Cartesian3.pack(g,o,C),C+=3;for(var v=1;v<u;v++){var m=q.interpolateUsingSurfaceDistance(v*p,_);m.height=d[v],g=i.cartographicToCartesian(m,O),y.Cartesian3.pack(g,o,C),C+=3}return C}function W(a,e,r,i,t,n,o,s){var c=i.scaleToGeodeticSurface(a,B),l=i.scaleToGeodeticSurface(e,U),u=i.cartesianToCartographic(c,L),h=i.cartesianToCartographic(l,_),f=b.numberOfPointsRhumbLine(u,h,r),d=V(f,t,n);z.ellipsoid.equals(i)||(z=new E.EllipsoidRhumbLine(void 0,void 0,i)),z.setEndPoints(u,h);var p=z.surfaceDistance/f,C=s;u.height=t;var g=i.cartographicToCartesian(u,O);y.Cartesian3.pack(g,o,C),C+=3;for(var v=1;v<f;v++){var m=z.interpolateUsingSurfaceDistance(v*p,_);m.height=d[v],g=i.cartographicToCartesian(m,O),y.Cartesian3.pack(g,o,C),C+=3}return C}b.wrapLongitude=function(a,e){var r=[],i=[];if(w.defined(a)&&0<a.length){e=w.defaultValue(e,v.Matrix4.IDENTITY);var t=v.Matrix4.inverseTransformation(e,S),n=v.Matrix4.multiplyByPoint(t,y.Cartesian3.ZERO,R),o=y.Cartesian3.normalize(v.Matrix4.multiplyByPointAsVector(t,y.Cartesian3.UNIT_Y,D),D),s=A.Plane.fromPointNormal(n,o,M),c=y.Cartesian3.normalize(v.Matrix4.multiplyByPointAsVector(t,y.Cartesian3.UNIT_X,G),G),l=A.Plane.fromPointNormal(n,c,x),u=1;r.push(y.Cartesian3.clone(a[0]));for(var h=r[0],f=a.length,d=1;d<f;++d){var p=a[d];if(A.Plane.getPointDistance(l,h)<0||A.Plane.getPointDistance(l,p)<0){var C=m.IntersectionTests.lineSegmentPlane(h,p,s,N);if(w.defined(C)){var g=y.Cartesian3.multiplyByScalar(o,5e-9,I);A.Plane.getPointDistance(s,h)<0&&y.Cartesian3.negate(g,g),r.push(y.Cartesian3.add(C,g,new y.Cartesian3)),i.push(u+1),y.Cartesian3.negate(g,g),r.push(y.Cartesian3.add(C,g,new y.Cartesian3)),u=1}}r.push(y.Cartesian3.clone(a[d])),u++,h=p}i.push(u)}return{positions:r,lengths:i}},b.generateArc=function(a){w.defined(a)||(a={});var e=a.positions;if(!w.defined(e))throw new T.DeveloperError("options.positions is required.");var r=e.length,i=w.defaultValue(a.ellipsoid,y.Ellipsoid.WGS84),t=w.defaultValue(a.height,0),n=Array.isArray(t);if(r<1)return[];if(1===r){var o=i.scaleToGeodeticSurface(e[0],B);if(0!==(t=n?t[0]:t)){var s=i.geodeticSurfaceNormal(o,O);y.Cartesian3.multiplyByScalar(s,t,s),y.Cartesian3.add(o,s,o)}return[o.x,o.y,o.z]}var c=a.minDistance;if(!w.defined(c)){var l=w.defaultValue(a.granularity,P.CesiumMath.RADIANS_PER_DEGREE);c=P.CesiumMath.chordLength(l,i.maximumRadius)}var u,h=0;for(u=0;u<r-1;u++)h+=b.numberOfPoints(e[u],e[u+1],c);var f=3*(h+1),d=new Array(f),p=0;for(u=0;u<r-1;u++){p=X(e[u],e[u+1],c,i,n?t[u]:t,n?t[u+1]:t,d,p)}k.length=0;var C=e[r-1],g=i.cartesianToCartographic(C,L);g.height=n?t[r-1]:t;var v=i.cartographicToCartesian(g,O);return y.Cartesian3.pack(v,d,f-3),d};var Y=new y.Cartographic,H=new y.Cartographic;b.generateRhumbArc=function(a){w.defined(a)||(a={});var e=a.positions;if(!w.defined(e))throw new T.DeveloperError("options.positions is required.");var r=e.length,i=w.defaultValue(a.ellipsoid,y.Ellipsoid.WGS84),t=w.defaultValue(a.height,0),n=Array.isArray(t);if(r<1)return[];if(1===r){var o=i.scaleToGeodeticSurface(e[0],B);if(0!==(t=n?t[0]:t)){var s=i.geodeticSurfaceNormal(o,O);y.Cartesian3.multiplyByScalar(s,t,s),y.Cartesian3.add(o,s,o)}return[o.x,o.y,o.z]}var c,l,u=w.defaultValue(a.granularity,P.CesiumMath.RADIANS_PER_DEGREE),h=0,f=i.cartesianToCartographic(e[0],Y);for(c=0;c<r-1;c++)l=i.cartesianToCartographic(e[c+1],H),h+=b.numberOfPointsRhumbLine(f,l,u),f=y.Cartographic.clone(l,Y);var d=3*(h+1),p=new Array(d),C=0;for(c=0;c<r-1;c++){C=W(e[c],e[c+1],u,i,n?t[c]:t,n?t[c+1]:t,p,C)}k.length=0;var g=e[r-1],v=i.cartesianToCartographic(g,L);v.height=n?t[r-1]:t;var m=i.cartographicToCartesian(v,O);return y.Cartesian3.pack(m,p,d-3),p},b.generateCartesianArc=function(a){for(var e=b.generateArc(a),r=e.length/3,i=new Array(r),t=0;t<r;t++)i[t]=y.Cartesian3.unpack(e,3*t);return i},b.generateCartesianRhumbArc=function(a){for(var e=b.generateRhumbArc(a),r=e.length/3,i=new Array(r),t=0;t<r;t++)i[t]=y.Cartesian3.unpack(e,3*t);return i},a.PolylinePipeline=b});
