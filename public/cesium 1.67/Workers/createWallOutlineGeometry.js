/**
 * Cesium - https://github.com/CesiumGS/cesium
 *
 * Copyright 2011-2020 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["./when-a55a8a4c","./Check-bc1d37d9","./Math-d7cbfcf6","./Cartesian2-6ec3db89","./Transforms-a4d7073e","./RuntimeError-7c184ac0","./WebGLConstants-4c11ee5f","./ComponentDatatype-919a7463","./GeometryAttribute-291ff23b","./GeometryAttributes-1c7ce91d","./IndexDatatype-4351ba4c","./IntersectionTests-3d9e1b94","./Plane-37b84dad","./EllipsoidTangentPlane-323c7a98","./EllipsoidRhumbLine-4d1a57d2","./PolygonPipeline-5b0d203a","./EllipsoidGeodesic-365e69f7","./PolylinePipeline-83c8909c","./WallGeometryLibrary-9b863158"],function(P,m,D,x,G,e,i,L,T,V,I,t,r,n,a,o,s,l,S){"use strict";var q=new x.Cartesian3,R=new x.Cartesian3;function p(e){var i=(e=P.defaultValue(e,P.defaultValue.EMPTY_OBJECT)).positions,t=e.maximumHeights,r=e.minimumHeights;if(!P.defined(i))throw new m.DeveloperError("options.positions is required.");if(P.defined(t)&&t.length!==i.length)throw new m.DeveloperError("options.positions and options.maximumHeights must have the same length.");if(P.defined(r)&&r.length!==i.length)throw new m.DeveloperError("options.positions and options.minimumHeights must have the same length.");var n=P.defaultValue(e.granularity,D.CesiumMath.RADIANS_PER_DEGREE),a=P.defaultValue(e.ellipsoid,x.Ellipsoid.WGS84);this._positions=i,this._minimumHeights=r,this._maximumHeights=t,this._granularity=n,this._ellipsoid=x.Ellipsoid.clone(a),this._workerName="createWallOutlineGeometry";var o=1+i.length*x.Cartesian3.packedLength+2;P.defined(r)&&(o+=r.length),P.defined(t)&&(o+=t.length),this.packedLength=o+x.Ellipsoid.packedLength+1}p.pack=function(e,i,t){if(!P.defined(e))throw new m.DeveloperError("value is required");if(!P.defined(i))throw new m.DeveloperError("array is required");var r;t=P.defaultValue(t,0);var n=e._positions,a=n.length;for(i[t++]=a,r=0;r<a;++r,t+=x.Cartesian3.packedLength)x.Cartesian3.pack(n[r],i,t);var o=e._minimumHeights;if(a=P.defined(o)?o.length:0,i[t++]=a,P.defined(o))for(r=0;r<a;++r)i[t++]=o[r];var s=e._maximumHeights;if(a=P.defined(s)?s.length:0,i[t++]=a,P.defined(s))for(r=0;r<a;++r)i[t++]=s[r];return x.Ellipsoid.pack(e._ellipsoid,i,t),i[t+=x.Ellipsoid.packedLength]=e._granularity,i};var u=x.Ellipsoid.clone(x.Ellipsoid.UNIT_SPHERE),f={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:u,granularity:void 0};return p.unpack=function(e,i,t){if(!P.defined(e))throw new m.DeveloperError("array is required");var r;i=P.defaultValue(i,0);var n,a,o=e[i++],s=new Array(o);for(r=0;r<o;++r,i+=x.Cartesian3.packedLength)s[r]=x.Cartesian3.unpack(e,i);if(0<(o=e[i++]))for(n=new Array(o),r=0;r<o;++r)n[r]=e[i++];if(0<(o=e[i++]))for(a=new Array(o),r=0;r<o;++r)a[r]=e[i++];var l=x.Ellipsoid.unpack(e,i,u),d=e[i+=x.Ellipsoid.packedLength];return P.defined(t)?(t._positions=s,t._minimumHeights=n,t._maximumHeights=a,t._ellipsoid=x.Ellipsoid.clone(l,t._ellipsoid),t._granularity=d,t):(f.positions=s,f.minimumHeights=n,f.maximumHeights=a,f.granularity=d,new p(f))},p.fromConstantHeights=function(e){var i,t,r=(e=P.defaultValue(e,P.defaultValue.EMPTY_OBJECT)).positions;if(!P.defined(r))throw new m.DeveloperError("options.positions is required.");var n=e.minimumHeight,a=e.maximumHeight,o=P.defined(n),s=P.defined(a);if(o||s){var l=r.length;i=o?new Array(l):void 0,t=s?new Array(l):void 0;for(var d=0;d<l;++d)o&&(i[d]=n),s&&(t[d]=a)}return new p({positions:r,maximumHeights:t,minimumHeights:i,ellipsoid:e.ellipsoid})},p.createGeometry=function(e){var i=e._positions,t=e._minimumHeights,r=e._maximumHeights,n=e._granularity,a=e._ellipsoid,o=S.WallGeometryLibrary.computePositions(a,i,r,t,n,!1);if(P.defined(o)){var s,l=o.bottomPositions,d=o.topPositions,m=d.length,p=2*m,u=new Float64Array(p),f=0;for(m/=3,s=0;s<m;++s){var h=3*s,g=x.Cartesian3.fromArray(d,h,q),c=x.Cartesian3.fromArray(l,h,R);u[f++]=c.x,u[f++]=c.y,u[f++]=c.z,u[f++]=g.x,u[f++]=g.y,u[f++]=g.z}var y=new V.GeometryAttributes({position:new T.GeometryAttribute({componentDatatype:L.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:u})}),v=p/3;p=2*v-4+v;var E=I.IndexDatatype.createTypedArray(v,p),w=0;for(s=0;s<v-2;s+=2){var _=s,C=s+2,H=x.Cartesian3.fromArray(u,3*_,q),b=x.Cartesian3.fromArray(u,3*C,R);if(!x.Cartesian3.equalsEpsilon(H,b,D.CesiumMath.EPSILON10)){var A=s+1,k=s+3;E[w++]=A,E[w++]=_,E[w++]=A,E[w++]=k,E[w++]=_,E[w++]=C}}return E[w++]=v-2,E[w++]=v-1,new T.Geometry({attributes:y,indices:E,primitiveType:T.PrimitiveType.LINES,boundingSphere:new G.BoundingSphere.fromVertices(u)})}},function(e,i){return P.defined(i)&&(e=p.unpack(e,i)),e._ellipsoid=x.Ellipsoid.clone(e._ellipsoid),p.createGeometry(e)}});
