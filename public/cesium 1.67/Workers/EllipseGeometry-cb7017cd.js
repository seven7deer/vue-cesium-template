/**
 * Cesium - https://github.com/CesiumGS/cesium
 *
 * Copyright 2011-2020 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/master/LICENSE.md for full licensing details.
 */
define(["exports","./when-a55a8a4c","./Check-bc1d37d9","./Math-d7cbfcf6","./Cartesian2-6ec3db89","./Transforms-a4d7073e","./ComponentDatatype-919a7463","./GeometryAttribute-291ff23b","./GeometryAttributes-1c7ce91d","./GeometryPipeline-9b42374e","./IndexDatatype-4351ba4c","./GeometryOffsetAttribute-c9accdb9","./VertexFormat-7f136973","./EllipseGeometryLibrary-62835faa","./GeometryInstance-fadc2629"],function(e,U,f,p,Q,W,q,J,Z,v,_,K,h,B,C){"use strict";var X=new Q.Cartesian3,$=new Q.Cartesian3,ee=new Q.Cartesian3,te=new Q.Cartesian3,re=new Q.Cartesian2,ae=new W.Matrix3,Y=new W.Matrix3,ie=new W.Quaternion,ne=new Q.Cartesian3,oe=new Q.Cartesian3,se=new Q.Cartesian3,ue=new Q.Cartographic,le=new Q.Cartesian3,me=new Q.Cartesian2,ce=new Q.Cartesian2;function w(e,t,r){var a=t.vertexFormat,i=t.center,n=t.semiMajorAxis,o=t.semiMinorAxis,s=t.ellipsoid,u=t.stRotation,l=r?e.length/3*2:e.length/3,m=t.shadowVolume,c=a.st?new Float32Array(2*l):void 0,p=a.normal?new Float32Array(3*l):void 0,y=a.tangent?new Float32Array(3*l):void 0,d=a.bitangent?new Float32Array(3*l):void 0,f=m?new Float32Array(3*l):void 0,h=0,A=ne,x=oe,g=se,b=new W.GeographicProjection(s),v=b.project(s.cartesianToCartographic(i,ue),le),_=s.scaleToGeodeticSurface(i,X);s.geodeticSurfaceNormal(_,_);var C=ae,w=Y;if(0!==u){var M=W.Quaternion.fromAxisAngle(_,u,ie);C=W.Matrix3.fromQuaternion(M,C),M=W.Quaternion.fromAxisAngle(_,-u,ie),w=W.Matrix3.fromQuaternion(M,w)}else C=W.Matrix3.clone(W.Matrix3.IDENTITY,C),w=W.Matrix3.clone(W.Matrix3.IDENTITY,w);for(var E=Q.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,me),I=Q.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,ce),T=e.length,G=r?T:0,N=G/3*2,P=0;P<T;P+=3){var F=P+1,D=P+2,V=Q.Cartesian3.fromArray(e,P,X);if(a.st){var O=W.Matrix3.multiplyByVector(C,V,$),S=b.project(s.cartesianToCartographic(O,ue),ee);Q.Cartesian3.subtract(S,v,S),re.x=(S.x+n)/(2*n),re.y=(S.y+o)/(2*o),E.x=Math.min(re.x,E.x),E.y=Math.min(re.y,E.y),I.x=Math.max(re.x,I.x),I.y=Math.max(re.y,I.y),r&&(c[h+N]=re.x,c[h+1+N]=re.y),c[h++]=re.x,c[h++]=re.y}(a.normal||a.tangent||a.bitangent||m)&&(A=s.geodeticSurfaceNormal(V,A),m&&(f[P+G]=-A.x,f[F+G]=-A.y,f[D+G]=-A.z),(a.normal||a.tangent||a.bitangent)&&((a.tangent||a.bitangent)&&(x=Q.Cartesian3.normalize(Q.Cartesian3.cross(Q.Cartesian3.UNIT_Z,A,x),x),W.Matrix3.multiplyByVector(w,x,x)),a.normal&&(p[P]=A.x,p[F]=A.y,p[D]=A.z,r&&(p[P+G]=-A.x,p[F+G]=-A.y,p[D+G]=-A.z)),a.tangent&&(y[P]=x.x,y[F]=x.y,y[D]=x.z,r&&(y[P+G]=-x.x,y[F+G]=-x.y,y[D+G]=-x.z)),a.bitangent&&(g=Q.Cartesian3.normalize(Q.Cartesian3.cross(A,x,g),g),d[P]=g.x,d[F]=g.y,d[D]=g.z,r&&(d[P+G]=g.x,d[F+G]=g.y,d[D+G]=g.z))))}if(a.st){T=c.length;for(var L=0;L<T;L+=2)c[L]=(c[L]-E.x)/(I.x-E.x),c[L+1]=(c[L+1]-E.y)/(I.y-E.y)}var R=new Z.GeometryAttributes;if(a.position){var j=B.EllipseGeometryLibrary.raisePositionsToHeight(e,t,r);R.position=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:j})}if(a.st&&(R.st=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:c})),a.normal&&(R.normal=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:p})),a.tangent&&(R.tangent=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),a.bitangent&&(R.bitangent=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:d})),m&&(R.extrudeDirection=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f})),r&&U.defined(t.offsetAttribute)){var k=new Uint8Array(l);if(t.offsetAttribute===K.GeometryOffsetAttribute.TOP)k=K.arrayFill(k,1,0,l/2);else{var z=t.offsetAttribute===K.GeometryOffsetAttribute.NONE?0:1;k=K.arrayFill(k,z)}R.applyOffset=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:k})}return R}function M(e){var t,r,a,i,n,o=new Array(e*(e+1)*12-6),s=0;for(a=1,i=t=0;i<3;i++)o[s++]=a++,o[s++]=t,o[s++]=a;for(i=2;i<e+1;++i){for(a=i*(i+1)-1,t=(i-1)*i-1,o[s++]=a++,o[s++]=t,o[s++]=a,r=2*i,n=0;n<r-1;++n)o[s++]=a,o[s++]=t++,o[s++]=t,o[s++]=a++,o[s++]=t,o[s++]=a;o[s++]=a++,o[s++]=t,o[s++]=a}for(r=2*e,++a,++t,i=0;i<r-1;++i)o[s++]=a,o[s++]=t++,o[s++]=t,o[s++]=a++,o[s++]=t,o[s++]=a;for(o[s++]=a,o[s++]=t++,o[s++]=t,o[s++]=a++,o[s++]=t++,o[s++]=t,++t,i=e-1;1<i;--i){for(o[s++]=t++,o[s++]=t,o[s++]=a,r=2*i,n=0;n<r-1;++n)o[s++]=a,o[s++]=t++,o[s++]=t,o[s++]=a++,o[s++]=t,o[s++]=a;o[s++]=t++,o[s++]=t++,o[s++]=a++}for(i=0;i<3;i++)o[s++]=t++,o[s++]=t,o[s++]=a;return o}var l=new Q.Cartesian3;var E=new W.BoundingSphere,I=new W.BoundingSphere;function m(e){var t=e.center,r=e.ellipsoid,a=e.semiMajorAxis,i=Q.Cartesian3.multiplyByScalar(r.geodeticSurfaceNormal(t,X),e.height,X);E.center=Q.Cartesian3.add(t,i,E.center),E.radius=a,i=Q.Cartesian3.multiplyByScalar(r.geodeticSurfaceNormal(t,i),e.extrudedHeight,i),I.center=Q.Cartesian3.add(t,i,I.center),I.radius=a;var n=B.EllipseGeometryLibrary.computeEllipsePositions(e,!0,!0),o=n.positions,s=n.numPts,u=n.outerPositions,l=W.BoundingSphere.union(E,I),m=w(o,e,!0),c=M(s),p=c.length;c.length=2*p;for(var y=o.length/3,d=0;d<p;d+=3)c[d+p]=c[d+2]+y,c[d+1+p]=c[d+1]+y,c[d+2+p]=c[d]+y;var f=_.IndexDatatype.createTypedArray(2*y/3,c),h=new J.Geometry({attributes:m,indices:f,primitiveType:J.PrimitiveType.TRIANGLES}),A=function(e,t){var r=t.vertexFormat,a=t.center,i=t.semiMajorAxis,n=t.semiMinorAxis,o=t.ellipsoid,s=t.height,u=t.extrudedHeight,l=t.stRotation,m=e.length/3*2,c=new Float64Array(3*m),p=r.st?new Float32Array(2*m):void 0,y=r.normal?new Float32Array(3*m):void 0,d=r.tangent?new Float32Array(3*m):void 0,f=r.bitangent?new Float32Array(3*m):void 0,h=t.shadowVolume,A=h?new Float32Array(3*m):void 0,x=0,g=ne,b=oe,v=se,_=new W.GeographicProjection(o),C=_.project(o.cartesianToCartographic(a,ue),le),w=o.scaleToGeodeticSurface(a,X);o.geodeticSurfaceNormal(w,w);for(var M=W.Quaternion.fromAxisAngle(w,l,ie),E=W.Matrix3.fromQuaternion(M,ae),I=Q.Cartesian2.fromElements(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,me),T=Q.Cartesian2.fromElements(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,ce),G=e.length,N=G/3*2,P=0;P<G;P+=3){var F,D=P+1,V=P+2,O=Q.Cartesian3.fromArray(e,P,X);if(r.st){var S=W.Matrix3.multiplyByVector(E,O,$),L=_.project(o.cartesianToCartographic(S,ue),ee);Q.Cartesian3.subtract(L,C,L),re.x=(L.x+i)/(2*i),re.y=(L.y+n)/(2*n),I.x=Math.min(re.x,I.x),I.y=Math.min(re.y,I.y),T.x=Math.max(re.x,T.x),T.y=Math.max(re.y,T.y),p[x+N]=re.x,p[x+1+N]=re.y,p[x++]=re.x,p[x++]=re.y}O=o.scaleToGeodeticSurface(O,O),F=Q.Cartesian3.clone(O,$),g=o.geodeticSurfaceNormal(O,g),h&&(A[P+G]=-g.x,A[D+G]=-g.y,A[V+G]=-g.z);var R=Q.Cartesian3.multiplyByScalar(g,s,te);if(O=Q.Cartesian3.add(O,R,O),R=Q.Cartesian3.multiplyByScalar(g,u,R),F=Q.Cartesian3.add(F,R,F),r.position&&(c[P+G]=F.x,c[D+G]=F.y,c[V+G]=F.z,c[P]=O.x,c[D]=O.y,c[V]=O.z),r.normal||r.tangent||r.bitangent){v=Q.Cartesian3.clone(g,v);var j=Q.Cartesian3.fromArray(e,(P+3)%G,te);Q.Cartesian3.subtract(j,O,j);var k=Q.Cartesian3.subtract(F,O,ee);g=Q.Cartesian3.normalize(Q.Cartesian3.cross(k,j,g),g),r.normal&&(y[P]=g.x,y[D]=g.y,y[V]=g.z,y[P+G]=g.x,y[D+G]=g.y,y[V+G]=g.z),r.tangent&&(b=Q.Cartesian3.normalize(Q.Cartesian3.cross(v,g,b),b),d[P]=b.x,d[D]=b.y,d[V]=b.z,d[P+G]=b.x,d[P+1+G]=b.y,d[P+2+G]=b.z),r.bitangent&&(f[P]=v.x,f[D]=v.y,f[V]=v.z,f[P+G]=v.x,f[D+G]=v.y,f[V+G]=v.z)}}if(r.st){G=p.length;for(var z=0;z<G;z+=2)p[z]=(p[z]-I.x)/(T.x-I.x),p[z+1]=(p[z+1]-I.y)/(T.y-I.y)}var B=new Z.GeometryAttributes;if(r.position&&(B.position=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:c})),r.st&&(B.st=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:p})),r.normal&&(B.normal=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:y})),r.tangent&&(B.tangent=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:d})),r.bitangent&&(B.bitangent=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:f})),h&&(B.extrudeDirection=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.FLOAT,componentsPerAttribute:3,values:A})),U.defined(t.offsetAttribute)){var Y=new Uint8Array(m);if(t.offsetAttribute===K.GeometryOffsetAttribute.TOP)Y=K.arrayFill(Y,1,0,m/2);else{var H=t.offsetAttribute===K.GeometryOffsetAttribute.NONE?0:1;Y=K.arrayFill(Y,H)}B.applyOffset=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:Y})}return B}(u,e);c=function(e){for(var t=e.length/3,r=_.IndexDatatype.createTypedArray(t,6*t),a=0,i=0;i<t;i++){var n=i+t,o=(i+1)%t,s=o+t;r[a++]=i,r[a++]=n,r[a++]=o,r[a++]=o,r[a++]=n,r[a++]=s}return r}(u);var x=_.IndexDatatype.createTypedArray(2*u.length/3,c),g=new J.Geometry({attributes:A,indices:x,primitiveType:J.PrimitiveType.TRIANGLES}),b=v.GeometryPipeline.combineInstances([new C.GeometryInstance({geometry:h}),new C.GeometryInstance({geometry:g})]);return{boundingSphere:l,attributes:b[0].attributes,indices:b[0].indices}}function u(e,t,r,a,i,n,o){for(var s=B.EllipseGeometryLibrary.computeEllipsePositions({center:e,semiMajorAxis:t,semiMinorAxis:r,rotation:a,granularity:i},!1,!0).outerPositions,u=s.length/3,l=new Array(u),m=0;m<u;++m)l[m]=Q.Cartesian3.fromArray(s,3*m);var c=Q.Rectangle.fromCartesianArray(l,n,o);return c.width>p.CesiumMath.PI&&(c.north=0<c.north?p.CesiumMath.PI_OVER_TWO-p.CesiumMath.EPSILON7:c.north,c.south=c.south<0?p.CesiumMath.EPSILON7-p.CesiumMath.PI_OVER_TWO:c.south,c.east=p.CesiumMath.PI,c.west=-p.CesiumMath.PI),c}function A(e){var t=(e=U.defaultValue(e,U.defaultValue.EMPTY_OBJECT)).center,r=U.defaultValue(e.ellipsoid,Q.Ellipsoid.WGS84),a=e.semiMajorAxis,i=e.semiMinorAxis,n=U.defaultValue(e.granularity,p.CesiumMath.RADIANS_PER_DEGREE),o=U.defaultValue(e.vertexFormat,h.VertexFormat.DEFAULT);if(f.Check.defined("options.center",t),f.Check.typeOf.number("options.semiMajorAxis",a),f.Check.typeOf.number("options.semiMinorAxis",i),a<i)throw new f.DeveloperError("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(n<=0)throw new f.DeveloperError("granularity must be greater than zero.");var s=U.defaultValue(e.height,0),u=U.defaultValue(e.extrudedHeight,s);this._center=Q.Cartesian3.clone(t),this._semiMajorAxis=a,this._semiMinorAxis=i,this._ellipsoid=Q.Ellipsoid.clone(r),this._rotation=U.defaultValue(e.rotation,0),this._stRotation=U.defaultValue(e.stRotation,0),this._height=Math.max(u,s),this._granularity=n,this._vertexFormat=h.VertexFormat.clone(o),this._extrudedHeight=Math.min(u,s),this._shadowVolume=U.defaultValue(e.shadowVolume,!1),this._workerName="createEllipseGeometry",this._offsetAttribute=e.offsetAttribute,this._rectangle=void 0,this._textureCoordinateRotationPoints=void 0}A.packedLength=Q.Cartesian3.packedLength+Q.Ellipsoid.packedLength+h.VertexFormat.packedLength+9,A.pack=function(e,t,r){return f.Check.defined("value",e),f.Check.defined("array",t),r=U.defaultValue(r,0),Q.Cartesian3.pack(e._center,t,r),r+=Q.Cartesian3.packedLength,Q.Ellipsoid.pack(e._ellipsoid,t,r),r+=Q.Ellipsoid.packedLength,h.VertexFormat.pack(e._vertexFormat,t,r),r+=h.VertexFormat.packedLength,t[r++]=e._semiMajorAxis,t[r++]=e._semiMinorAxis,t[r++]=e._rotation,t[r++]=e._stRotation,t[r++]=e._height,t[r++]=e._granularity,t[r++]=e._extrudedHeight,t[r++]=e._shadowVolume?1:0,t[r]=U.defaultValue(e._offsetAttribute,-1),t};var x=new Q.Cartesian3,g=new Q.Ellipsoid,b=new h.VertexFormat,T={center:x,ellipsoid:g,vertexFormat:b,semiMajorAxis:void 0,semiMinorAxis:void 0,rotation:void 0,stRotation:void 0,height:void 0,granularity:void 0,extrudedHeight:void 0,shadowVolume:void 0,offsetAttribute:void 0};A.unpack=function(e,t,r){f.Check.defined("array",e),t=U.defaultValue(t,0);var a=Q.Cartesian3.unpack(e,t,x);t+=Q.Cartesian3.packedLength;var i=Q.Ellipsoid.unpack(e,t,g);t+=Q.Ellipsoid.packedLength;var n=h.VertexFormat.unpack(e,t,b);t+=h.VertexFormat.packedLength;var o=e[t++],s=e[t++],u=e[t++],l=e[t++],m=e[t++],c=e[t++],p=e[t++],y=1===e[t++],d=e[t];return U.defined(r)?(r._center=Q.Cartesian3.clone(a,r._center),r._ellipsoid=Q.Ellipsoid.clone(i,r._ellipsoid),r._vertexFormat=h.VertexFormat.clone(n,r._vertexFormat),r._semiMajorAxis=o,r._semiMinorAxis=s,r._rotation=u,r._stRotation=l,r._height=m,r._granularity=c,r._extrudedHeight=p,r._shadowVolume=y,r._offsetAttribute=-1===d?void 0:d,r):(T.height=m,T.extrudedHeight=p,T.granularity=c,T.stRotation=l,T.rotation=u,T.semiMajorAxis=o,T.semiMinorAxis=s,T.shadowVolume=y,T.offsetAttribute=-1===d?void 0:d,new A(T))},A.computeRectangle=function(e,t){var r=(e=U.defaultValue(e,U.defaultValue.EMPTY_OBJECT)).center,a=U.defaultValue(e.ellipsoid,Q.Ellipsoid.WGS84),i=e.semiMajorAxis,n=e.semiMinorAxis,o=U.defaultValue(e.granularity,p.CesiumMath.RADIANS_PER_DEGREE),s=U.defaultValue(e.rotation,0);if(f.Check.defined("options.center",r),f.Check.typeOf.number("options.semiMajorAxis",i),f.Check.typeOf.number("options.semiMinorAxis",n),i<n)throw new f.DeveloperError("semiMajorAxis must be greater than or equal to the semiMinorAxis.");if(o<=0)throw new f.DeveloperError("granularity must be greater than zero.");return u(r,i,n,s,o,a,t)},A.createGeometry=function(e){if(!(e._semiMajorAxis<=0||e._semiMinorAxis<=0)){var t=e._height,r=e._extrudedHeight,a=!p.CesiumMath.equalsEpsilon(t,r,0,p.CesiumMath.EPSILON2);e._center=e._ellipsoid.scaleToGeodeticSurface(e._center,e._center);var i,n={center:e._center,semiMajorAxis:e._semiMajorAxis,semiMinorAxis:e._semiMinorAxis,ellipsoid:e._ellipsoid,rotation:e._rotation,height:t,granularity:e._granularity,vertexFormat:e._vertexFormat,stRotation:e._stRotation};if(a)n.extrudedHeight=r,n.shadowVolume=e._shadowVolume,n.offsetAttribute=e._offsetAttribute,i=m(n);else if(i=function(e){var t=e.center;l=Q.Cartesian3.multiplyByScalar(e.ellipsoid.geodeticSurfaceNormal(t,l),e.height,l),l=Q.Cartesian3.add(t,l,l);var r=new W.BoundingSphere(l,e.semiMajorAxis),a=B.EllipseGeometryLibrary.computeEllipsePositions(e,!0,!1),i=a.positions,n=a.numPts,o=w(i,e,!1),s=M(n);return{boundingSphere:r,attributes:o,indices:s=_.IndexDatatype.createTypedArray(i.length/3,s)}}(n),U.defined(e._offsetAttribute)){var o=i.attributes.position.values.length,s=new Uint8Array(o/3),u=e._offsetAttribute===K.GeometryOffsetAttribute.NONE?0:1;K.arrayFill(s,u),i.attributes.applyOffset=new J.GeometryAttribute({componentDatatype:q.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:1,values:s})}return new J.Geometry({attributes:i.attributes,indices:i.indices,primitiveType:J.PrimitiveType.TRIANGLES,boundingSphere:i.boundingSphere,offsetAttribute:e._offsetAttribute})}},A.createShadowVolume=function(e,t,r){var a=e._granularity,i=e._ellipsoid,n=t(a,i),o=r(a,i);return new A({center:e._center,semiMajorAxis:e._semiMajorAxis,semiMinorAxis:e._semiMinorAxis,ellipsoid:i,rotation:e._rotation,stRotation:e._stRotation,granularity:a,extrudedHeight:n,height:o,vertexFormat:h.VertexFormat.POSITION_ONLY,shadowVolume:!0})},Object.defineProperties(A.prototype,{rectangle:{get:function(){return U.defined(this._rectangle)||(this._rectangle=u(this._center,this._semiMajorAxis,this._semiMinorAxis,this._rotation,this._granularity,this._ellipsoid)),this._rectangle}},textureCoordinateRotationPoints:{get:function(){return U.defined(this._textureCoordinateRotationPoints)||(this._textureCoordinateRotationPoints=function(e){var t=-e._stRotation;if(0==t)return[0,0,0,1,1,0];for(var r=B.EllipseGeometryLibrary.computeEllipsePositions({center:e._center,semiMajorAxis:e._semiMajorAxis,semiMinorAxis:e._semiMinorAxis,rotation:e._rotation,granularity:e._granularity},!1,!0).outerPositions,a=r.length/3,i=new Array(a),n=0;n<a;++n)i[n]=Q.Cartesian3.fromArray(r,3*n);var o=e._ellipsoid,s=e.rectangle;return J.Geometry._textureCoordinateRotationPoints(i,t,o,s)}(this)),this._textureCoordinateRotationPoints}}}),e.EllipseGeometry=A});
